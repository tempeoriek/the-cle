@using Nop.Web.Models.Customer;

@{ //current category ID
    int currentCategoryId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    }


    //current product ID
    int currentProductId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    }



    var press = "inactive";
    var common = "inactive";
    var topic = "";
    var controllername = Url.RequestContext.RouteData.Values["controller"].ToString();
    if (controllername.Equals("press", StringComparison.OrdinalIgnoreCase))
    {
        press = "active";
    }
    else if (controllername.Equals("common", StringComparison.OrdinalIgnoreCase))
    {
        common = "active";
    }
    else if (controllername.Equals("topic", StringComparison.OrdinalIgnoreCase))
    {
        var url = Request.RawUrl;
        var seoname = url.Substring(url.LastIndexOf("/") + 1);
        if (seoname != "")
        {
            topic = seoname;
        }
    }
    else if(controllername.Equals("product", StringComparison.OrdinalIgnoreCase))
    {
        var url = Request.RawUrl;
        var seoname = url.Substring(url.LastIndexOf("/") + 1);
        if (seoname != "")
        {
            topic = seoname;
        }

    }
}


@* Normal *@
<div class="hidden-xs">
    <div id="sidebar-fixed" class="sidebar hidden-xs">
        @if (string.IsNullOrEmpty(ViewBag.HideDesktopMenu))
        {
        @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId, isSidebar = true, isMobile = false })




        @*@RenderMenuList(currentCategoryId, currentProductId, press, topic, common, false, "sidebar-menu", "", "", "", "", true)*@

        @*<div class="sidebar-menu">
            <ul class="list-unstyled list-inline text-left">
                <li>

                    <button class="dropdown-btn">Collection</button>
                    <div class="dropdown-container">
                        <hr />
                        <a href="#">Pearl and Daffodils</a>
                        <a href="#">Hummingbird's Song</a>
                        <a href="#">Blush</a>
                        <a href="#">Whimsical Garden</a>
                        <hr />
                    </div>
                </li>
                <li><a href="">Shop All</a></li>
                <li><a href="">New Arrival</a></li>
                <li><a href="">Kids</a></li>
                <li><a href="">Baby</a></li>
                <li><a href="">Coming Soon</a></li>
            </ul>
        </div>*@

        }

    </div>
</div>



@helper RenderMenuList(int currentCategoryId, int currentProductId, string press, string topic, string common, bool ismobile, string menuid, string newsletterId, string newsletterLink, string followId, string followPanelId, bool isSidebar)
{
<div class="list-group" style="background-color:aqua">
    <ul class="list-unstyled" id="@menuid">
        <li class="list-group-item panel">
            @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId, isSidebar = isSidebar,  isMobile = ismobile })
        </li>
    </ul>
</div>


}

<script>
    /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content - This allows the user to have multiple dropdowns without any conflict */
    var dropdown = document.getElementsByClassName("dropdown-btn");
    var i;

    for (i = 0; i < dropdown.length; i++) {
        dropdown[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var dropdownContent = this.nextElementSibling;
            if (dropdownContent.style.display === "block") {
                dropdownContent.style.display = "none";
            } else {
                dropdownContent.style.display = "block";
            }
        });
    }
</script>

