@model ProductDetailsModel.AddToCartModel
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Orders;


@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    @*<div class="collapse" style="margin-top:20px;">
            <div class="card card-body">
                <div class="col-md-12" style="margin-bottom:40px">
                    <div class="col-md-3" style="margin-left: -30px;">
                        <input type="button" class="btn colorEmail-btn font-gillsans"
                               value="ADD TO CART" style="background-color:white;border:1px solid;
                                                                border-color:black;font-size:10px" />
                    </div>
                    <div class="col-md-5 col-md-offset-4">
                        <span>24h expedit <br>Free delivery and returns</span>
                    </div>
                </div>
            </div>
        </div>*@




    <div class="add2cart">
        @if (Model.UpdatedShoppingCartItemId > 0)
        {
            @Html.HiddenFor(x => x.UpdatedShoppingCartItemId)
        }

        @if (!Model.DisableBuyButton)
        {
           
            <div class="row">
                <div class="col-5">

                    <div class="select-quantity">
                        @if (Model.CustomerEntersPrice)
                        {
                            <div class="customer-entered-price">
                                <div class="price-input">
                                    @Html.LabelFor(model => model.CustomerEnteredPrice, new { @class = "enter-price-label" }, ":")
                                    @*round price*@
                                    @Html.TextBox("CustomerEnteredPrice", Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice)), new { @class = "enter-price-input" })
                                </div>
                                <div class="price-range">
                                    @Model.CustomerEnteredPriceRange
                                </div>
                            </div>
                        }

                        @if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
                        {
                            <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
                        }

                        @*<select id="EnteredQuantity" name="EnteredQuantity" class="">
            @for(int i=1; i<=10;i++)
            {
                <option value="@i">@i</option>
            }
        </select>*@


                        @if (Model.AllowedQuantities.Count > 0)
                        {
                            @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, "QTY", new { @class = "form-control ddlAttrb" })

                        }
                        else
                        {

                            <div class="d-flex justify-content-between">
                                @*@Html.HiddenFor(model => model.EnteredQuantity)*@
                                    <input id="sub" type='button' value='-' class='sub quantity-btn qtyminus' field='EnteredQuantity' />
                                    @Html.TextBoxFor(model => model.EnteredQuantity, new { @class = "qty", id = "EnteredQuantity", type = "number" })
                                    <input id="add" type='button' value='+' class='add quantity-btn qtyplus' field='EnteredQuantity' />
                                @*@Html.TextBoxFor(model => model.EnteredQuantity, new { @class = "form-control" })*@
                            </div>

                            //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                            <script type="text/javascript">
                $(document).ready(function () {
                    $("#@Html.FieldIdFor(model => model.EnteredQuantity)").keydown(function (event) {
                        if (event.keyCode == 13) {
                            $("#add-to-cart-button-@Model.ProductId").click();
                            return false;
                        }
                    });
                });
                            </script>

                        }
                    </div>

                </div>
                <div class="col-7">
                    @{
                        var addToCartText = "";
                        if (Model.UpdatedShoppingCartItemId > 0)
                        {
                            addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                        }
                        else
                        {
                            addToCartText = "add to bag";  //T("ShoppingCart.AddToCart").Text;
                            if (Model.IsRental)
                            {
                                addToCartText = T("ShoppingCart.Rent").Text;
                            }
                            if (Model.AvailableForPreOrder)
                            {
                                addToCartText = T("ShoppingCart.PreOrder").Text;
                            }
                        }
                    }

                    <button type="button" id="add-to-cart-button-@Model.ProductId"
                            class="btn btn-default btn-addcart button_sare"
                            data-productid="@Model.ProductId"
                            onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;">
                        <span>@addToCartText</span>
                    </button>
                </div>
    </div>


     


        }
    </div>


   


    <div id="add2cart-notification" title="@T("Common.Notification")" style="display:none;"></div>
}